"""
    Create a set for numbers contained in the rows, cols and sub_boxes to track the
    Place the current numbers in a set


"""


def solve_sudoku(board):
    rows = [set() for _ in range(9)]
    cols = [set() for _ in range(9)]
    sub_boxes = [set() for _ in range(9)]
    to_visit = []

    for i in range(9):
        for j in range(9):
            if board[i][j] != '.':
                num = int(board[i][j])
                rows[i].add(num)
                cols[j].add(num)

                box_id = i // 3 * 3 + j // 3
                sub_boxes[box_id].add(num)
            else:
                to_visit.append((i, j))

    def back_tracking():
        if not to_visit:
            return True

        new_i, new_j = to_visit[-1]
        new_box_id = new_i // 3 * 3 + new_j // 3
        for n in range(1, 10):
            if n not in rows[new_i] and n not in cols[new_j] and n not in sub_boxes[new_box_id]:
                board[new_i][new_j] = str(n)
                rows[new_i].add(n)
                cols[new_j].add(n)
                sub_boxes[new_box_id].add(n)
                to_visit.pop()
                if back_tracking():
                    return True

                board[new_i][new_j] = '.'
                rows[new_i].remove(n)
                cols[new_j].remove(n)
                sub_boxes[new_box_id].remove(n)
                to_visit.append((new_i, new_j))

        return False

    back_tracking()


if __name__ == '__main__':
    sudokus = [[[".", ".", ".", ".", ".", ".", ".", "7", "."], ["2", "7", "5", ".", ".", ".", "3", "1", "4"],
               [".", ".", ".", ".", "2", "7", ".", "5", "."], ["9", "8", ".", ".", ".", ".", ".", "3", "1"],
               [".", "3", "1", "8", ".", "4", ".", ".", "."], [".", ".", ".", "1", ".", ".", "8", ".", "5"],
               ["7", ".", "6", "2", ".", ".", "1", "8", "."], [".", "9", ".", "7", ".", ".", ".", ".", "."],
               ["4", "1", ".", ".", ".", "5", ".", ".", "7"]],
              [[".", ".", "6", ".", ".", "4", ".", ".", "."], [".", "3", ".", ".", "1", ".", ".", "9", "5"],
               [".", ".", ".", ".", ".", ".", "8", ".", "."], [".", ".", ".", ".", "8", ".", "3", ".", "."],
               ["4", ".", ".", ".", ".", "1", ".", "8", "2"], [".", "2", ".", ".", ".", ".", "7", ".", "."],
               [".", ".", ".", ".", ".", ".", ".", ".", "7"], [".", "5", ".", ".", "9", ".", ".", "2", "1"],
               ["3", ".", ".", "5", ".", ".", ".", ".", "."]],
              [["6", ".", ".", ".", ".", ".", "1", ".", "."], [".", ".", ".", "3", ".", ".", ".", ".", "."],
               [".", "9", ".", ".", "4", "7", ".", "8", "."], ["9", ".", ".", ".", "5", "3", ".", ".", "6"],
               [".", ".", ".", "2", ".", ".", ".", "5", "."], [".", "3", ".", "8", ".", ".", ".", ".", "."],
               [".", "7", ".", ".", "9", "5", ".", "4", "."], [".", ".", "4", ".", ".", ".", ".", ".", "8"],
               [".", ".", ".", ".", "2", ".", ".", ".", "."]],
              [[".", ".", ".", ".", ".", ".", "7", ".", "."], [".", "4", ".", ".", "3", ".", ".", "6", "5"],
               [".", ".", "1", ".", ".", "8", ".", ".", "."], [".", "6", ".", ".", "5", ".", ".", "3", "9"],
               ["4", ".", ".", "6", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "2", "."],
               ["8", ".", ".", ".", ".", "3", ".", "9", "7"], [".", ".", ".", ".", "7", ".", "4", ".", "."],
               [".", "9", ".", ".", ".", ".", "2", ".", "."]],
              [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."],
               [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
               ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
               [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"],
               [".", ".", ".", ".", "8", ".", ".", "7", "9"]]]

    for sudoku in sudokus:
        print('Sudoku Before: ', sudoku)
        solve_sudoku(sudoku)
        print('Sudoku After: ', sudoku)

